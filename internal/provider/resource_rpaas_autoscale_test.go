// Copyright 2021 tsuru authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package provider

import (
	"context"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/tsuru/rpaas-operator/pkg/rpaas/client/autogenerated"
)

func TestAccRpaasAutoscale(t *testing.T) {
	server, _ := setupTestRpaasServer(t)
	defer server.Stop()

	resourceName := "rpaas_autoscale.my-rpaas"

	resource.Test(t, resource.TestCase{
		ProviderFactories: testAccProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: `
resource "rpaas_autoscale" "my-rpaas" {
  service_name = "rpaasv2"
  instance     = "my-rpaas"

  min_replicas = 0
  max_replicas = 10

  scheduled_window {
    min_replicas = 1
    start        = "00 08 * * 1-5"
    end          = "00 20 * * 1-5"
  }

  scheduled_window {
    min_replicas = 10
    start        = "00 19 * * 0"
    end          = "00 01 * * 1"
  }
}`,
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccResourceExists(resourceName),
					resource.TestCheckResourceAttr(resourceName, "id", "rpaasv2::my-rpaas"),
					resource.TestCheckResourceAttr(resourceName, "service_name", "rpaasv2"),
					resource.TestCheckResourceAttr(resourceName, "instance", "my-rpaas"),
					resource.TestCheckResourceAttr(resourceName, "min_replicas", "0"),
					resource.TestCheckResourceAttr(resourceName, "max_replicas", "10"),
					resource.TestCheckResourceAttr(resourceName, "scheduled_window.#", "2"),
					resource.TestCheckResourceAttr(resourceName, "scheduled_window.0.min_replicas", "1"),
					resource.TestCheckResourceAttr(resourceName, "scheduled_window.0.start", "00 08 * * 1-5"),
					resource.TestCheckResourceAttr(resourceName, "scheduled_window.0.end", "00 20 * * 1-5"),
					resource.TestCheckResourceAttr(resourceName, "scheduled_window.1.min_replicas", "10"),
					resource.TestCheckResourceAttr(resourceName, "scheduled_window.1.start", "00 19 * * 0"),
					resource.TestCheckResourceAttr(resourceName, "scheduled_window.1.end", "00 01 * * 1"),
				),
			},

			{
				Config: `
resource "rpaas_autoscale" "my-rpaas" {
  service_name = "rpaasv2"
  instance     = "my-rpaas"

  min_replicas = 0
  max_replicas = 10

  scheduled_window {
    min_replicas = 1
    start        = "00 08 * * 1-5"
    end          = "00 20 * * 1-5"
  }
}`,
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccResourceExists(resourceName),
					resource.TestCheckResourceAttr(resourceName, "id", "rpaasv2::my-rpaas"),
					resource.TestCheckResourceAttr(resourceName, "service_name", "rpaasv2"),
					resource.TestCheckResourceAttr(resourceName, "scheduled_window.#", "1"),
					resource.TestCheckResourceAttr(resourceName, "scheduled_window.0.min_replicas", "1"),
					resource.TestCheckResourceAttr(resourceName, "scheduled_window.0.start", "00 08 * * 1-5"),
					resource.TestCheckResourceAttr(resourceName, "scheduled_window.0.end", "00 20 * * 1-5"),
				),
			},
		},
	})
}

func TestAccRpaasAutoscale_import(t *testing.T) {
	server, provider := setupTestRpaasServer(t)
	defer server.Stop()

	_, err := provider.Client("rpaasv2", "my-rpaas").RpaasApi.UpdateAutoscale(context.Background(), "my-rpaas").
		Autoscale(autogenerated.Autoscale{
			MinReplicas: 1,
			MaxReplicas: 100,
			Cpu:         autogenerated.PtrInt32(75),
			Rps:         autogenerated.PtrInt32(500),
			Schedules: []autogenerated.ScheduledWindow{
				{
					MinReplicas: 10,
					Start:       "00 20 * * 0",
					End:         "00 00 * * 1",
				},
				{
					MinReplicas: 10,
					Start:       "00 20 * * 2",
					End:         "00 01 * * 3",
				},
			},
		}).
		Execute()
	require.NoError(t, err, "could not set the initial autoscale config")

	resource.Test(t, resource.TestCase{
		ProviderFactories: testAccProviderFactories,
		CheckDestroy:      nil,
		Steps: []resource.TestStep{
			{
				// Testing Import
				Config:        `resource "rpaas_autoscale" "imported" {}`,
				ResourceName:  "rpaas_autoscale.imported",
				ImportStateId: "rpaasv2::my-rpaas",
				ImportState:   true,
				ImportStateCheck: func(s []*terraform.InstanceState) error {
					assert.Len(t, s, 1)
					state := s[0]
					assert.Equal(t, "rpaasv2", state.Attributes["service_name"])
					assert.Equal(t, "my-rpaas", state.Attributes["instance"])
					assert.Equal(t, "1", state.Attributes["min_replicas"])
					assert.Equal(t, "100", state.Attributes["max_replicas"])
					assert.Equal(t, "75", state.Attributes["target_cpu_utilization_percentage"])
					assert.Equal(t, "500", state.Attributes["target_requests_per_second"])
					assert.Equal(t, "2", state.Attributes["scheduled_window.#"])
					assert.Equal(t, "10", state.Attributes["scheduled_window.0.min_replicas"])
					assert.Equal(t, "00 20 * * 0", state.Attributes["scheduled_window.0.start"])
					assert.Equal(t, "00 00 * * 1", state.Attributes["scheduled_window.0.end"])
					assert.Equal(t, "10", state.Attributes["scheduled_window.0.min_replicas"])
					assert.Equal(t, "00 20 * * 2", state.Attributes["scheduled_window.1.start"])
					assert.Equal(t, "00 01 * * 3", state.Attributes["scheduled_window.1.end"])
					return nil
				},
			},

			{
				// Testing Import legacy ID
				Config:        `resource "rpaas_autoscale" "imported" {}`,
				ResourceName:  "rpaas_autoscale.imported",
				ImportStateId: "rpaasv2/my-rpaas", // legacy id format
				ImportState:   true,
				ImportStateCheck: func(s []*terraform.InstanceState) error {
					state := s[0]
					assert.Len(t, s, 1)
					assert.Equal(t, "rpaasv2::my-rpaas", state.Attributes["id"])
					assert.Equal(t, "rpaasv2", state.Attributes["service_name"])
					assert.Equal(t, "my-rpaas", state.Attributes["instance"])
					assert.Equal(t, "1", state.Attributes["min_replicas"])
					assert.Equal(t, "100", state.Attributes["max_replicas"])
					assert.Equal(t, "75", state.Attributes["target_cpu_utilization_percentage"])
					assert.Equal(t, "500", state.Attributes["target_requests_per_second"])
					assert.Equal(t, "2", state.Attributes["scheduled_window.#"])
					assert.Equal(t, "10", state.Attributes["scheduled_window.0.min_replicas"])
					assert.Equal(t, "00 20 * * 0", state.Attributes["scheduled_window.0.start"])
					assert.Equal(t, "00 00 * * 1", state.Attributes["scheduled_window.0.end"])
					assert.Equal(t, "10", state.Attributes["scheduled_window.0.min_replicas"])
					assert.Equal(t, "00 20 * * 2", state.Attributes["scheduled_window.1.start"])
					assert.Equal(t, "00 01 * * 3", state.Attributes["scheduled_window.1.end"])
					return nil
				},
			},
		},
	})
}
